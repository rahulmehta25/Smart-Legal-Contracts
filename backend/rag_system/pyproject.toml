[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rag-arbitration-detection"
version = "1.0.0"
description = "A comprehensive RAG-based system for detecting arbitration clauses in legal documents"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "RAG Arbitration Team", email = "contact@ragarbitration.com"}
]
maintainers = [
    {name = "RAG Arbitration Team", email = "contact@ragarbitration.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Legal Industry",
    "Intended Audience :: Developers",
    "Topic :: Text Processing :: Legal Document Analysis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
keywords = [
    "legal-tech",
    "arbitration", 
    "nlp",
    "rag",
    "document-analysis",
    "machine-learning",
    "ai",
    "legal-documents",
    "contract-analysis"
]
requires-python = ">=3.9"
dependencies = [
    "torch>=2.1.0,<3.0.0",
    "transformers>=4.35.0,<5.0.0",
    "sentence-transformers>=2.2.2,<3.0.0",
    "langchain>=0.1.0,<1.0.0",
    "langchain-community>=0.0.10,<1.0.0",
    "langchain-openai>=0.0.5,<1.0.0",
    "openai>=1.3.0,<2.0.0",
    "anthropic>=0.7.0,<1.0.0",
    "fastapi>=0.104.0,<1.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0",
    "pydantic>=2.4.0,<3.0.0",
    "pydantic-settings>=2.0.3,<3.0.0",
    "sqlalchemy>=2.0.23,<3.0.0",
    "asyncpg>=0.29.0,<1.0.0",
    "redis>=5.0.1,<6.0.0",
    "chromadb>=0.4.15,<1.0.0",
    "pandas>=2.1.3,<3.0.0",
    "numpy>=1.24.3,<2.0.0",
    "scikit-learn>=1.3.2,<2.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.11.0",
    "isort>=5.12.0", 
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
]
blockchain = [
    "web3>=6.11.3,<7.0.0",
    "py-solc-x>=1.12.0,<2.0.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
performance = [
    "psutil>=5.9.6",
    "memory-profiler>=0.61.0",
]
all = [
    "rag-arbitration-detection[dev,blockchain,docs,performance]"
]

[project.urls]
Homepage = "https://github.com/arbitration-detection/rag-system"
Documentation = "https://rag-arbitration-docs.readthedocs.io/"
Repository = "https://github.com/arbitration-detection/rag-system"
"Bug Tracker" = "https://github.com/arbitration-detection/rag-system/issues"

[project.scripts]
rag-arbitration = "src.api.main:main"
rag-train = "src.core.training:main"
rag-evaluate = "src.core.evaluation:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "config*", "tests*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
"*" = [
    "config/*.yaml",
    "config/*.json", 
    "data/knowledge_base/*.json",
    "models/embeddings/*.bin",
    "models/classifiers/*.pkl",
]

# Black code formatting
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["src", "tests", "config"]
known_third_party = [
    "fastapi",
    "pydantic",
    "sqlalchemy",
    "torch",
    "transformers",
    "langchain",
    "openai"
]

# MyPy type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "langchain.*",
    "sentence_transformers.*",
    "transformers.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
    "-v",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
select = ["E", "W", "F"]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    "venv",
]