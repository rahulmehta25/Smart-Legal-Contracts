# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: database

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: cache
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: cache

---
# Chroma Vector Database Service
apiVersion: v1
kind: Service
metadata:
  name: chroma-service
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: vector-db
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: chroma
  selector:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: vector-db

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: backend

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: frontend

---
# Nginx Proxy Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: proxy
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  selector:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: proxy

---
# Headless service for StatefulSet (if needed for clustering)
apiVersion: v1
kind: Service
metadata:
  name: arbitration-headless
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: headless
spec:
  clusterIP: None
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: backend
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: frontend
  selector:
    app.kubernetes.io/name: arbitration-detection