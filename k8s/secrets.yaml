# Kubernetes Secrets Template
# IMPORTANT: Replace all placeholder values before applying to cluster
# Use: kubectl create secret generic <secret-name> --from-literal=key=value

apiVersion: v1
kind: Secret
metadata:
  name: arbitration-secrets
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Database credentials (base64 encoded)
  # echo -n "your_secure_password" | base64
  POSTGRES_PASSWORD: cGxlYXNlX2NoYW5nZV90aGlzX3Bhc3N3b3Jk  # please_change_this_password
  
  # Application secret key (base64 encoded)
  # python -c "import secrets; print(secrets.token_urlsafe(32))" | base64
  SECRET_KEY: cGxlYXNlX2dlbmVyYXRlX2FfcmFuZG9tX3NlY3JldF9rZXk=  # please_generate_a_random_secret_key
  
  # JWT signing key (base64 encoded)
  JWT_SECRET: cGxlYXNlX2dlbmVyYXRlX2FfcmFuZG9tX2p3dF9zZWNyZXQ=  # please_generate_a_random_jwt_secret
  
  # Vector database auth (base64 encoded)
  CHROMA_AUTH_TOKEN: Y2hyb21hX2F1dGhfdG9rZW5fY2hhbmdlX21l  # chroma_auth_token_change_me

---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: monitoring
type: Opaque
data:
  # Grafana admin password (base64 encoded)
  GRAFANA_ADMIN_PASSWORD: Z3JhZmFuYV9hZG1pbl9wYXNzd29yZA==  # grafana_admin_password
  
  # SMTP configuration for alerts (base64 encoded)
  SMTP_HOST: c210cC5leGFtcGxlLmNvbQ==  # smtp.example.com
  SMTP_USER: YWxlcnRzQGV4YW1wbGUuY29t  # alerts@example.com
  SMTP_PASSWORD: c210cF9wYXNzd29yZA==  # smtp_password

---
# TLS Certificate Secret Template
# Create using: kubectl create secret tls arbitration-tls --cert=path/to/cert.pem --key=path/to/key.pem -n arbitration-system
apiVersion: v1
kind: Secret
metadata:
  name: arbitration-tls
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # Add your base64 encoded certificate and key here
  # tls.crt: <base64-encoded-certificate>
  # tls.key: <base64-encoded-private-key>

---
# Registry credentials for private container registry (if needed)
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
data:
  # Create using: kubectl create secret docker-registry registry-credentials \
  # --docker-server=your-registry-server \
  # --docker-username=your-username \
  # --docker-password=your-password \
  # --docker-email=your-email \
  # -n arbitration-system
  .dockerconfigjson: eyJhdXRocyI6e319  # Empty auth config - replace with actual credentials