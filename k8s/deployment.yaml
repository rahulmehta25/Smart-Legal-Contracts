# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: database
    app.kubernetes.io/version: "15"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: arbitration-detection
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: arbitration-detection
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: arbitration-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config
        configMap:
          name: postgres-config

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: cache
    app.kubernetes.io/version: "7"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: arbitration-detection
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: arbitration-detection
        app.kubernetes.io/component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "512mb"
        - --maxmemory-policy
        - "allkeys-lru"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "1"
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Chroma Vector Database Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chroma
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: vector-db
    app.kubernetes.io/version: "latest"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: arbitration-detection
      app.kubernetes.io/component: vector-db
  template:
    metadata:
      labels:
        app.kubernetes.io/name: arbitration-detection
        app.kubernetes.io/component: vector-db
    spec:
      containers:
      - name: chroma
        image: ghcr.io/chroma-core/chroma:latest
        ports:
        - containerPort: 8000
        env:
        - name: CHROMA_SERVER_AUTHN_CREDENTIALS_FILE
          value: /chroma/auth.txt
        - name: CHROMA_SERVER_AUTHN_PROVIDER
          value: chromadb.auth.basic.BasicAuthenticationServerProvider
        volumeMounts:
        - name: chroma-storage
          mountPath: /chroma/chroma
        - name: chroma-auth
          mountPath: /chroma/auth.txt
          subPath: auth.txt
        livenessProbe:
          httpGet:
            path: /api/v1/heartbeat
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/heartbeat
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2"
      volumes:
      - name: chroma-storage
        persistentVolumeClaim:
          claimName: chroma-pvc
      - name: chroma-auth
        secret:
          secretName: arbitration-secrets
          items:
          - key: CHROMA_AUTH_TOKEN
            path: auth.txt

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: backend
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: arbitration-detection
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: arbitration-detection
        app.kubernetes.io/component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      imagePullSecrets:
      - name: registry-credentials
      initContainers:
      - name: wait-for-db
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL to be ready..."
          until nc -z postgres-service 5432; do
            echo "PostgreSQL is not ready yet..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
          
          echo "Waiting for Redis to be ready..."
          until nc -z redis-service 6379; do
            echo "Redis is not ready yet..."
            sleep 2
          done
          echo "Redis is ready!"
          
          echo "Waiting for Chroma to be ready..."
          until nc -z chroma-service 8000; do
            echo "Chroma is not ready yet..."
            sleep 2
          done
          echo "Chroma is ready!"
      containers:
      - name: backend
        image: arbitration-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: REDIS_URL
        - name: CHROMA_URL
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: CHROMA_URL
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: arbitration-secrets
              key: SECRET_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: arbitration-secrets
              key: POSTGRES_PASSWORD
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: DEBUG
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: LOG_LEVEL
        - name: WORKERS
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: WORKERS
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: CORS_ORIGINS
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: model-storage
          mountPath: /app/models
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: model-storage
        persistentVolumeClaim:
          claimName: model-pvc

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: frontend
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: arbitration-detection
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: arbitration-detection
        app.kubernetes.io/component: frontend
    spec:
      imagePullSecrets:
      - name: registry-credentials
      containers:
      - name: frontend
        image: arbitration-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: NODE_ENV
        - name: NEXT_PUBLIC_API_URL
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: NEXT_PUBLIC_API_URL
        - name: HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: HOSTNAME
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: arbitration-config
              key: FRONTEND_PORT
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false

---
# Nginx Reverse Proxy Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: proxy
    app.kubernetes.io/version: "alpine"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: arbitration-detection
      app.kubernetes.io/component: proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: arbitration-detection
        app.kubernetes.io/component: proxy
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: nginx-logs
          mountPath: /var/log/nginx
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-logs
        emptyDir: {}