apiVersion: v1
kind: ConfigMap
metadata:
  name: arbitration-config
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: config
data:
  # Database configuration
  POSTGRES_DB: "arbitration_db"
  POSTGRES_USER: "arbitration_user"
  DATABASE_URL: "postgresql://arbitration_user:$(POSTGRES_PASSWORD)@postgres-service:5432/arbitration_db"
  
  # Redis configuration
  REDIS_URL: "redis://redis-service:6379/0"
  
  # Chroma vector database configuration
  CHROMA_URL: "http://chroma-service:8000"
  
  # Backend configuration
  DEBUG: "false"
  LOG_LEVEL: "info"
  WORKERS: "4"
  HOST: "0.0.0.0"
  PORT: "8000"
  
  # Frontend configuration
  NODE_ENV: "production"
  NEXT_PUBLIC_API_URL: "https://api.arbitration-system.example.com"
  HOSTNAME: "0.0.0.0"
  FRONTEND_PORT: "3000"
  
  # CORS configuration
  CORS_ORIGINS: "https://arbitration-system.example.com,https://www.arbitration-system.example.com"
  
  # Monitoring configuration
  PROMETHEUS_METRICS_ENABLED: "true"
  PROMETHEUS_PORT: "9090"
  
  # Performance settings
  MAX_CONNECTIONS: "200"
  SHARED_BUFFERS: "256MB"
  EFFECTIVE_CACHE_SIZE: "1GB"
  WORK_MEM: "4MB"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
    app.kubernetes.io/component: proxy
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
        access_log /var/log/nginx/access.log main;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 100M;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript
                   application/javascript application/xml+rss application/json;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=upload:10m rate=1r/s;
        
        upstream backend {
            server backend-service:8000;
            keepalive 32;
        }
        
        upstream frontend {
            server frontend-service:3000;
            keepalive 32;
        }
        
        server {
            listen 80;
            server_name _;
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # API routes
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }
            
            # Document upload endpoint with higher limits
            location /api/v1/documents/upload {
                limit_req zone=upload burst=5 nodelay;
                client_max_body_size 100M;
                proxy_pass http://backend;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 60s;
                proxy_send_timeout 60s;
                proxy_read_timeout 300s;
            }
            
            # Frontend routes
            location / {
                proxy_pass http://frontend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }
            
            # Static assets caching
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                proxy_pass http://frontend;
            }
        }
    }