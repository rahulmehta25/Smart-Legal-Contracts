name: Deploy Arbitration Detection RAG System

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # Test Stage
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        node-version: [18]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_arbitration_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-test.txt

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint backend code
      run: |
        cd backend
        python -m flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Lint frontend code
      run: |
        cd frontend
        npm run lint

    - name: Test backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_arbitration_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
      run: |
        cd backend
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80

    - name: Test frontend
      run: |
        cd frontend
        npm run test:ci

    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload frontend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter for Python
      run: |
        pip install bandit
        bandit -r backend/app/ -f json -o bandit-report.json || true

    - name: Run npm audit for frontend
      run: |
        cd frontend
        npm audit --audit-level=high --json > npm-audit-report.json || true

  # Build Stage
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'

    outputs:
      backend_image: ${{ steps.backend_meta.outputs.tags }}
      frontend_image: ${{ steps.frontend_meta.outputs.tags }}
      backend_digest: ${{ steps.backend_build.outputs.digest }}
      frontend_digest: ${{ steps.frontend_build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract backend metadata
      id: backend_meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Extract frontend metadata
      id: frontend_meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push backend image
      id: backend_build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: true
        tags: ${{ steps.backend_meta.outputs.tags }}
        labels: ${{ steps.backend_meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push frontend image
      id: frontend_build
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        target: production
        push: true
        tags: ${{ steps.frontend_meta.outputs.tags }}
        labels: ${{ steps.frontend_meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM for backend
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.backend_meta.outputs.tags }}
        format: spdx-json
        output-file: backend-sbom.spdx.json

    - name: Generate SBOM for frontend
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.frontend_meta.outputs.tags }}
        format: spdx-json
        output-file: frontend-sbom.spdx.json

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.arbitration-system.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}

    - name: Deploy to staging
      run: |
        # Update image tags in manifests
        sed -i "s|arbitration-backend:latest|${{ needs.build.outputs.backend_image }}|g" k8s/deployment.yaml
        sed -i "s|arbitration-frontend:latest|${{ needs.build.outputs.frontend_image }}|g" k8s/deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/persistent-volumes.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/hpa.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/backend -n arbitration-system --timeout=600s
        kubectl rollout status deployment/frontend -n arbitration-system --timeout=600s

    - name: Run smoke tests
      run: |
        # Wait for ingress to be ready
        sleep 60
        
        # Health check
        curl -f https://staging.arbitration-system.example.com/health || exit 1
        curl -f https://api-staging.arbitration-system.example.com/health || exit 1

    - name: Run integration tests
      run: |
        cd backend
        python -m pytest tests/integration/ -v --base-url=https://api-staging.arbitration-system.example.com

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://arbitration-system.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

    - name: Blue-Green Deployment
      run: |
        # Create deployment manifests with new images
        sed -i "s|arbitration-backend:latest|${{ needs.build.outputs.backend_image }}|g" k8s/deployment.yaml
        sed -i "s|arbitration-frontend:latest|${{ needs.build.outputs.frontend_image }}|g" k8s/deployment.yaml
        
        # Deploy green environment
        sed 's/name: backend/name: backend-green/g; s/name: frontend/name: frontend-green/g' k8s/deployment.yaml > k8s/deployment-green.yaml
        
        # Apply green deployment
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/persistent-volumes.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/deployment-green.yaml
        
        # Wait for green deployment
        kubectl rollout status deployment/backend-green -n arbitration-system --timeout=600s
        kubectl rollout status deployment/frontend-green -n arbitration-system --timeout=600s

    - name: Smoke test green environment
      run: |
        # Test green environment
        kubectl port-forward -n arbitration-system deployment/backend-green 8000:8000 &
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        pkill -f "kubectl port-forward"

    - name: Switch traffic to green
      run: |
        # Update services to point to green deployment
        kubectl patch service backend-service -n arbitration-system -p '{"spec":{"selector":{"app.kubernetes.io/name":"arbitration-detection","app.kubernetes.io/component":"backend-green"}}}'
        kubectl patch service frontend-service -n arbitration-system -p '{"spec":{"selector":{"app.kubernetes.io/name":"arbitration-detection","app.kubernetes.io/component":"frontend-green"}}}'

    - name: Final health check
      run: |
        sleep 60
        curl -f https://arbitration-system.example.com/health || exit 1
        curl -f https://api.arbitration-system.example.com/health || exit 1

    - name: Cleanup old deployment
      run: |
        # Remove old blue deployment
        kubectl delete deployment backend frontend -n arbitration-system --ignore-not-found=true
        
        # Rename green to blue for next deployment
        kubectl patch deployment backend-green -n arbitration-system -p '{"metadata":{"name":"backend"}}'
        kubectl patch deployment frontend-green -n arbitration-system -p '{"metadata":{"name":"frontend"}}'

  # Rollback capability
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: https://arbitration-system.example.com

    steps:
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

    - name: Rollback deployment
      run: |
        kubectl rollout undo deployment/backend -n arbitration-system
        kubectl rollout undo deployment/frontend -n arbitration-system
        
        kubectl rollout status deployment/backend -n arbitration-system --timeout=600s
        kubectl rollout status deployment/frontend -n arbitration-system --timeout=600s

    - name: Verify rollback
      run: |
        sleep 60
        curl -f https://arbitration-system.example.com/health || exit 1
        curl -f https://api.arbitration-system.example.com/health || exit 1