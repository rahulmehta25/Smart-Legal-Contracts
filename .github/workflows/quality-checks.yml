name: 'Code Quality & Security Checks'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  code-quality:
    name: 'Code Quality Analysis'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      # Python code quality
      - name: Install Python quality tools
        run: |
          pip install black isort flake8 mypy pylint bandit
      
      - name: Check Python code formatting with Black
        run: |
          black --check --diff backend/src/
      
      - name: Check Python import sorting with isort
        run: |
          isort --check-only --diff backend/src/
      
      - name: Run flake8 linting
        run: |
          flake8 backend/src/ --max-line-length=88 --extend-ignore=E203,W503
      
      - name: Run mypy type checking
        run: |
          mypy backend/src/ --ignore-missing-imports
      
      - name: Run pylint analysis
        run: |
          pylint backend/src/ --fail-under=8.0 --output-format=json > pylint-report.json || true
      
      # JavaScript/TypeScript code quality
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run ESLint
        run: |
          cd frontend
          npm run lint -- --format=json --output-file=eslint-report.json
      
      - name: Run Prettier check
        run: |
          cd frontend
          npm run prettier:check
      
      - name: Run TypeScript compiler check
        run: |
          cd frontend
          npm run type-check
      
      # Upload reports
      - name: Upload quality reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quality-reports
          path: |
            pylint-report.json
            frontend/eslint-report.json

  security-analysis:
    name: 'Security Analysis'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # Python security analysis
      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r backend/src/ -f json -o bandit-security-report.json
        continue-on-error: true
      
      - name: Run Safety dependency check
        run: |
          pip install safety
          safety check --json --output safety-report.json
        continue-on-error: true
      
      - name: Check for secrets with detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline
      
      # Node.js security analysis
      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --file=frontend/package.json
        continue-on-error: true
      
      # Upload security reports
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-security-report.json
            safety-report.json

  dependency-analysis:
    name: 'Dependency Analysis'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      # Python dependency analysis
      - name: Check Python dependencies with pip-audit
        run: |
          pip install pip-audit
          pip-audit --requirement backend/requirements.txt --format=json --output=pip-audit-report.json
        continue-on-error: true
      
      - name: Check for outdated Python packages
        run: |
          pip install pip-check
          pip list --outdated --format=json > outdated-python-packages.json
      
      # Node.js dependency analysis
      - name: Check for outdated Node packages
        run: |
          cd frontend
          npm outdated --json > outdated-node-packages.json || true
      
      - name: Analyze bundle size
        run: |
          cd frontend
          npm ci
          npm run build
          npx bundle-analyzer .next/static/chunks/*.js --json > bundle-analysis.json
      
      # Upload dependency reports
      - name: Upload dependency reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-reports
          path: |
            pip-audit-report.json
            outdated-python-packages.json
            frontend/outdated-node-packages.json
            frontend/bundle-analysis.json

  documentation-check:
    name: 'Documentation Quality'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # Check documentation completeness
      - name: Check README files
        run: |
          # Check if README files exist and are not empty
          test -s README.md || (echo "Root README.md is missing or empty" && exit 1)
          test -s backend/README.md || (echo "Backend README.md is missing or empty" && exit 1)
          test -s frontend/README.md || (echo "Frontend README.md is missing or empty" && exit 1)
      
      - name: Check API documentation
        run: |
          pip install -r backend/requirements.txt
          cd backend
          # Generate OpenAPI documentation
          python -c "
          from main import app
          import json
          with open('openapi.json', 'w') as f:
              json.dump(app.openapi(), f, indent=2)
          "
          # Validate OpenAPI spec
          pip install openapi-spec-validator
          openapi-spec-validator openapi.json
      
      - name: Check Python docstrings coverage
        run: |
          pip install interrogate
          interrogate backend/src/ --verbose --fail-under=80
      
      - name: Check TypeScript documentation
        run: |
          cd frontend
          npm ci
          # Generate TypeDoc documentation
          npx typedoc --out docs src/ --json typedoc.json
      
      # Link checking
      - name: Check documentation links
        uses: lycheeverse/lychee-action@v1.8.0
        with:
          args: --verbose --no-progress **/*.md **/*.rst
          fail: true

  test-coverage-analysis:
    name: 'Test Coverage Analysis'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      # Python coverage analysis
      - name: Run Python tests with coverage
        run: |
          cd backend
          pip install -r requirements.txt -r requirements-test.txt
          pytest --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80
      
      # Frontend coverage analysis
      - name: Run frontend tests with coverage
        run: |
          cd frontend
          npm ci
          npm run test:coverage
      
      - name: Analyze coverage trends
        run: |
          # Compare coverage with previous runs
          python scripts/analyze_coverage_trends.py
      
      # Upload coverage reports
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml,./frontend/coverage/coverage-final.json
          fail_ci_if_error: true
          verbose: true

  performance-analysis:
    name: 'Performance Analysis'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # Code complexity analysis
      - name: Analyze Python code complexity
        run: |
          pip install radon xenon
          radon cc backend/src/ --json > complexity-report.json
          xenon backend/src/ --max-absolute=B --max-modules=B --max-average=A
      
      - name: Analyze frontend bundle performance
        run: |
          cd frontend
          npm ci
          npm run build
          # Analyze bundle size and performance
          npx bundlesize
      
      # Memory and performance profiling
      - name: Profile memory usage
        run: |
          cd backend
          pip install memory-profiler
          python -m memory_profiler scripts/profile_memory.py
      
      # Upload performance reports
      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            complexity-report.json
            frontend/bundlesize-report.json

  code-metrics:
    name: 'Code Metrics & Statistics'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Calculate code metrics
      - name: Calculate code statistics
        run: |
          # Line count statistics
          echo "## Code Statistics" > code-metrics.md
          echo "### Python Code" >> code-metrics.md
          find backend/src -name "*.py" -exec wc -l {} + | tail -1 >> code-metrics.md
          
          echo "### TypeScript/JavaScript Code" >> code-metrics.md
          find frontend/src -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | xargs wc -l | tail -1 >> code-metrics.md
          
          echo "### Test Code" >> code-metrics.md
          find . -path "*/test*" -name "*.py" -o -name "*.ts" -o -name "*.tsx" | xargs wc -l | tail -1 >> code-metrics.md
      
      - name: Generate code complexity heatmap
        run: |
          pip install radon
          radon cc backend/src/ --min=B --show-complexity > complexity-heatmap.txt
      
      # Upload metrics
      - name: Upload code metrics
        uses: actions/upload-artifact@v3
        with:
          name: code-metrics
          path: |
            code-metrics.md
            complexity-heatmap.txt

  # Quality gates - fail if quality standards not met
  quality-gates:
    name: 'Quality Gates'
    runs-on: ubuntu-latest
    needs: [code-quality, security-analysis, test-coverage-analysis]
    if: always()
    
    steps:
      - name: Check quality gate status
        run: |
          # This job fails if any quality checks fail
          if [ "${{ needs.code-quality.result }}" != "success" ]; then
            echo "❌ Code quality checks failed"
            exit 1
          fi
          
          if [ "${{ needs.security-analysis.result }}" != "success" ]; then
            echo "❌ Security analysis failed"
            exit 1
          fi
          
          if [ "${{ needs.test-coverage-analysis.result }}" != "success" ]; then
            echo "❌ Test coverage below threshold"
            exit 1
          fi
          
          echo "✅ All quality gates passed"
      
      - name: Create quality summary
        run: |
          echo "## Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Code quality: Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Security analysis: Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Test coverage: Above threshold" >> $GITHUB_STEP_SUMMARY
          echo "✅ Documentation: Complete" >> $GITHUB_STEP_SUMMARY