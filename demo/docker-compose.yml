version: '3.8'

name: arbitration-detector-demo

services:
  # PostgreSQL Database
  demo-postgres:
    image: postgres:15-alpine
    container_name: demo-arbitration-db
    environment:
      POSTGRES_DB: demo_arbitration_db
      POSTGRES_USER: demo_user
      POSTGRES_PASSWORD: demo_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - demo_postgres_data:/var/lib/postgresql/data
      - ./sample-data/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./sample-data/db/demo-data.sql:/docker-entrypoint-initdb.d/02-demo-data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U demo_user -d demo_arbitration_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - demo-network

  # Redis for caching and sessions
  demo-redis:
    image: redis:7-alpine
    container_name: demo-arbitration-redis
    ports:
      - "6380:6379"
    volumes:
      - demo_redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - demo-network

  # Vector Database (ChromaDB)
  demo-chroma:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: demo-vector-db
    ports:
      - "8002:8000"
    volumes:
      - demo_chroma_data:/chroma/chroma
      - ./sample-data/embeddings:/chroma/import
    environment:
      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=/chroma/auth.txt
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.basic.BasicAuthenticationServerProvider
      - CHROMA_HOST=0.0.0.0
      - CHROMA_PORT=8000
    networks:
      - demo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Demo Backend API
  demo-backend:
    build:
      context: ../
      dockerfile: Dockerfile
      target: demo
    container_name: demo-arbitration-backend
    ports:
      - "8001:8000"
    volumes:
      - ./sample-data:/app/demo-data
      - ../backend:/app/backend
      - ./config:/app/config
    environment:
      - ENV=demo
      - DEBUG=true
      - DATABASE_URL=postgresql://demo_user:demo_pass@demo-postgres:5432/demo_arbitration_db
      - REDIS_URL=redis://demo-redis:6379/0
      - CHROMA_URL=http://demo-chroma:8000
      - CORS_ORIGINS=http://localhost:3001,http://demo-frontend:3000
      - DEMO_MODE=true
      - LOAD_SAMPLE_DATA=true
      - CREATE_DEMO_USERS=true
      - API_RATE_LIMIT=1000
      - ENABLE_VOICE_INTERFACE=true
      - ENABLE_COLLABORATION=true
      - ENABLE_BLOCKCHAIN=true
      - ENABLE_ANALYTICS=true
      - LOG_LEVEL=info
    depends_on:
      demo-postgres:
        condition: service_healthy
      demo-redis:
        condition: service_healthy
      demo-chroma:
        condition: service_healthy
    networks:
      - demo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Demo Frontend
  demo-frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.demo
    container_name: demo-arbitration-frontend
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app/demo
      - ../frontend:/app/base
      - /app/node_modules
    environment:
      - NODE_ENV=demo
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - NEXT_PUBLIC_WS_URL=ws://localhost:8001/ws
      - NEXT_PUBLIC_DEMO_MODE=true
      - NEXT_PUBLIC_ENABLE_VOICE=true
      - NEXT_PUBLIC_ENABLE_COLLABORATION=true
      - NEXT_PUBLIC_ENABLE_ANALYTICS=true
      - NEXT_PUBLIC_DEMO_USERS=admin@demo.com,lawyer@demo.com,business@demo.com
      - WATCHPACK_POLLING=true
    depends_on:
      demo-backend:
        condition: service_healthy
    networks:
      - demo-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Analytics and Monitoring (Prometheus)
  demo-prometheus:
    image: prom/prometheus:latest
    container_name: demo-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - demo_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - demo-network

  # Grafana Dashboard
  demo-grafana:
    image: grafana/grafana:latest
    container_name: demo-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=demo123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - demo_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - demo-prometheus
    networks:
      - demo-network

  # Demo Documentation Server
  demo-docs:
    image: nginx:alpine
    container_name: demo-docs-server
    ports:
      - "8080:80"
    volumes:
      - ./docs:/usr/share/nginx/html
      - ./nginx/docs.conf:/etc/nginx/conf.d/default.conf
    networks:
      - demo-network

  # Sample File Server (for downloads)
  demo-files:
    image: nginx:alpine
    container_name: demo-file-server
    ports:
      - "8081:80"
    volumes:
      - ./sample-data/documents:/usr/share/nginx/html/documents
      - ./sample-data/exports:/usr/share/nginx/html/exports
      - ./nginx/files.conf:/etc/nginx/conf.d/default.conf
    networks:
      - demo-network

  # WebSocket Service for Real-time Features
  demo-websocket:
    build:
      context: ../
      dockerfile: Dockerfile.websocket
    container_name: demo-websocket
    ports:
      - "8003:8000"
    environment:
      - REDIS_URL=redis://demo-redis:6379/1
      - DATABASE_URL=postgresql://demo_user:demo_pass@demo-postgres:5432/demo_arbitration_db
    depends_on:
      - demo-redis
      - demo-postgres
    networks:
      - demo-network

  # Demo API Gateway (Nginx)
  demo-gateway:
    image: nginx:alpine
    container_name: demo-api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/gateway.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/ssl/certs
    depends_on:
      - demo-backend
      - demo-frontend
      - demo-websocket
    networks:
      - demo-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  demo_postgres_data:
    driver: local
  demo_redis_data:
    driver: local
  demo_chroma_data:
    driver: local
  demo_prometheus_data:
    driver: local
  demo_grafana_data:
    driver: local

networks:
  demo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Demo-specific configuration
x-demo-config:
  version: "1.0.0"
  features:
    - document_analysis
    - voice_interface
    - collaboration
    - contract_builder
    - blockchain_verification
    - analytics_dashboard
    - api_playground
  
  users:
    - email: admin@demo.com
      role: admin
      password: Demo123!
    - email: lawyer@demo.com
      role: legal_expert
      password: Demo123!
    - email: business@demo.com
      role: business_user
      password: Demo123!
  
  api_keys:
    - key: demo-api-key-12345
      rate_limit: 1000
      permissions: ["read", "analyze", "export"]
  
  sample_documents:
    count: 25
    languages: ["en", "es", "fr", "de", "zh", "ja"]
    types: ["tos", "privacy", "license", "contract"]
  
  performance_targets:
    response_time: "< 2s"
    accuracy: "> 94%"
    uptime: "> 99%"
    concurrent_users: 100