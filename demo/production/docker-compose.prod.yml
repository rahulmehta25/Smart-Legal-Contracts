# Production Docker Compose configuration
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: arbitration-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-arbitration_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - app-network
    ports:
      - "127.0.0.1:5432:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-arbitration_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: arbitration-redis-prod
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network
    ports:
      - "127.0.0.1:6379:6379"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../..
      dockerfile: demo/production/Dockerfile.backend
    container_name: arbitration-backend-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-arbitration_prod}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - WORKERS=4
      - MAX_UPLOAD_SIZE=100MB
      - CORS_ORIGINS=${FRONTEND_URL},${DOMAIN_URL}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - backend_temp:/app/temp
    networks:
      - app-network
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Frontend Application
  frontend:
    build:
      context: ../..
      dockerfile: demo/production/Dockerfile.frontend
    container_name: arbitration-frontend-prod
    environment:
      - NEXT_PUBLIC_API_URL=${BACKEND_URL:-http://backend:8000}
      - NEXT_PUBLIC_ENVIRONMENT=production
      - NEXT_PUBLIC_DOMAIN=${DOMAIN_URL}
      - NODE_ENV=production
    networks:
      - app-network
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: arbitration-nginx-prod
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/sites:/etc/nginx/sites-available:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: arbitration-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - app-network
    ports:
      - "127.0.0.1:9090:9090"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: arbitration-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN_URL}
      - GF_SERVER_ROOT_URL=https://${DOMAIN_URL}/grafana/
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - app-network
    ports:
      - "127.0.0.1:3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Log Aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: arbitration-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ../monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - app-network
    ports:
      - "127.0.0.1:3100:3100"
    restart: unless-stopped

  # Log Collection - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: arbitration-promtail
    volumes:
      - ../monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - app-network
    depends_on:
      - loki
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: arbitration-backup
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-arbitration_prod}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - backup_data:/backups
      - ../scripts:/scripts:ro
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        while true; do
          sleep 3600
          /scripts/backup.sh
        done
      "
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  backend_temp:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  backup_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16