apiVersion: v1
kind: ConfigMap
metadata:
  name: arbitration-config
  namespace: arbitration-system
  labels:
    app.kubernetes.io/name: arbitration-detection
data:
  # Database Configuration
  POSTGRES_DB: "arbitration_db"
  POSTGRES_USER: "arbitration_user"
  
  # Service URLs
  REDIS_URL: "redis://redis-service:6379/0"
  CHROMA_URL: "http://chroma-service:8000"
  ELASTICSEARCH_URL: "http://elasticsearch:9200"
  RABBITMQ_URL: "amqp://arbitration_user:arbitration_pass@rabbitmq-service:5672/"
  
  # Application Configuration
  DEBUG: "false"
  LOG_LEVEL: "info"
  NODE_ENV: "production"
  WORKERS: "4"
  MAX_WORKERS: "8"
  
  # Frontend Configuration
  HOSTNAME: "0.0.0.0"
  FRONTEND_PORT: "3000"
  NEXT_PUBLIC_API_URL: "https://api.arbitrationdetector.com"
  NEXT_PUBLIC_GRAPHQL_URL: "https://api.arbitrationdetector.com/graphql"
  NEXT_PUBLIC_WS_URL: "wss://api.arbitrationdetector.com/ws"
  
  # CORS Configuration
  CORS_ORIGINS: "https://arbitrationdetector.com,https://www.arbitrationdetector.com"
  
  # Features Configuration
  ENABLE_BLOCKCHAIN_FEATURES: "true"
  ENABLE_AI_FEATURES: "true"
  ENABLE_COLLABORATION_FEATURES: "true"
  ENABLE_MOBILE_SYNC: "true"
  ENABLE_ANALYTICS: "true"
  ENABLE_FEDERATED_LEARNING: "false"
  
  # Monitoring Configuration
  PROMETHEUS_ENABLED: "true"
  JAEGER_ENDPOINT: "http://jaeger-collector:14268"
  SENTRY_ENVIRONMENT: "production"
  
  # Rate Limiting
  RATE_LIMIT_PER_MINUTE: "100"
  RATE_LIMIT_PER_HOUR: "5000"
  CACHE_TTL_SECONDS: "300"
  MAX_FILE_SIZE_MB: "100"
  MAX_REQUEST_SIZE_MB: "10"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: arbitration-system
data:
  postgresql.conf: |
    # PostgreSQL Configuration for Production
    
    # Connection Settings
    max_connections = 300
    shared_buffers = 512MB
    effective_cache_size = 2GB
    work_mem = 16MB
    maintenance_work_mem = 256MB
    
    # WAL Settings
    wal_buffers = 16MB
    checkpoint_completion_target = 0.9
    wal_writer_delay = 200ms
    commit_delay = 0
    commit_siblings = 5
    
    # Query Planner
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_messages = warning
    log_min_error_statement = error
    log_min_duration_statement = 1000
    
    # Performance Monitoring
    shared_preload_libraries = 'pg_stat_statements'
    track_activity_query_size = 2048
    pg_stat_statements.track = all
    pg_stat_statements.max = 10000
    
    # Replication (if using streaming replication)
    wal_level = replica
    max_wal_senders = 3
    hot_standby = on

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: arbitration-system
data:
  redis.conf: |
    # Redis Configuration for Production
    
    # Network
    bind 0.0.0.0
    port 6379
    timeout 0
    
    # Memory Management
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    rdbcompression yes
    rdbchecksum yes
    
    # AOF
    appendonly yes
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # Slow Log
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    
    # Security
    # requirepass will be set via environment variable
    
    # Limits
    tcp-keepalive 300
    tcp-backlog 511

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: arbitration-system
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 4096;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        access_log /var/log/nginx/access.log main;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 100m;
        
        # Compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        # Rate Limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
        
        # Upstream Backend
        upstream backend {
            least_conn;
            server backend-service:8000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        # Upstream Frontend
        upstream frontend {
            least_conn;
            server frontend-service:3000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        # Main server block
        server {
            listen 80;
            listen [::]:80;
            server_name arbitrationdetector.com www.arbitrationdetector.com;
            
            # Security Headers
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
            add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # API endpoints
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }
            
            # GraphQL endpoint
            location /graphql {
                limit_req zone=api burst=10 nodelay;
                proxy_pass http://backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # WebSocket connections
            location /ws {
                proxy_pass http://backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_read_timeout 86400;
            }
            
            # Frontend
            location / {
                proxy_pass http://frontend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
            }
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: arbitration-system
data:
  01-extensions.sql: |
    -- Enable required PostgreSQL extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    CREATE EXTENSION IF NOT EXISTS "btree_gist";
  
  02-roles.sql: |
    -- Create additional database roles
    CREATE ROLE arbitration_readonly;
    CREATE ROLE arbitration_readwrite;
    
    -- Grant permissions
    GRANT CONNECT ON DATABASE arbitration_db TO arbitration_readonly;
    GRANT CONNECT ON DATABASE arbitration_db TO arbitration_readwrite;
    
    GRANT USAGE ON SCHEMA public TO arbitration_readonly;
    GRANT USAGE ON SCHEMA public TO arbitration_readwrite;
    
    -- These will be granted after tables are created
    -- GRANT SELECT ON ALL TABLES IN SCHEMA public TO arbitration_readonly;
    -- GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO arbitration_readwrite;