import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
  Dimensions,
  Share,
} from 'react-native';
import { RouteProp, useRoute, useNavigation } from '@react-navigation/native';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { useTheme } from '@hooks/useTheme';
import { RootStackParamList, ArbitrationAnalysis, ArbitrationClause, RiskLevel } from '@types/index';
import { analysisService } from '@services/analysisService';
import { documentService } from '@services/documentService';

type AnalysisScreenRouteProp = RouteProp<RootStackParamList, 'Analysis'>;

const { width } = Dimensions.get('window');

const AnalysisScreen: React.FC = () => {
  const { theme } = useTheme();
  const route = useRoute<AnalysisScreenRouteProp>();
  const navigation = useNavigation();
  const { documentId } = route.params;

  const [analysis, setAnalysis] = useState<ArbitrationAnalysis | null>(null);
  const [loading, setLoading] = useState(true);
  const [expandedClause, setExpandedClause] = useState<string | null>(null);

  useEffect(() => {
    loadAnalysis();
  }, [documentId]);

  const loadAnalysis = async () => {
    try {
      setLoading(true);
      const analysisData = await analysisService.getAnalysisByDocumentId(documentId);
      
      if (analysisData) {
        setAnalysis(analysisData);
      } else {
        // If no analysis exists, try to create one
        const document = await documentService.getDocumentById(documentId);
        if (document) {
          const newAnalysis = await analysisService.analyzeDocument(document);
          setAnalysis(newAnalysis);
        }
      }
    } catch (error) {
      console.error('Error loading analysis:', error);
      Alert.alert('Error', 'Failed to load analysis results');
    } finally {
      setLoading(false);
    }
  };

  const getRiskColor = (riskLevel: RiskLevel) => {
    switch (riskLevel) {
      case RiskLevel.LOW:
        return theme.colors.success;
      case RiskLevel.MEDIUM:
        return theme.colors.warning;
      case RiskLevel.HIGH:
        return theme.colors.error;
      case RiskLevel.CRITICAL:
        return '#DC2626';
      default:
        return theme.colors.textSecondary;
    }
  };

  const getClauseTypeIcon = (type: string) => {
    switch (type) {
      case 'mandatory_arbitration':
        return 'gavel';
      case 'class_action_waiver':
        return 'people-outline';
      case 'jurisdiction_clause':
        return 'location-on';
      case 'dispute_resolution':
        return 'balance';
      default:
        return 'description';
    }
  };

  const shareAnalysis = async () => {
    if (!analysis) return;

    try {
      const message = `Analysis Results:\n\n` +
        `Arbitration Clause: ${analysis.hasArbitrationClause ? 'Detected' : 'Not Found'}\n` +
        `Risk Level: ${analysis.riskLevel.toUpperCase()}\n` +
        `Confidence: ${Math.round(analysis.confidence * 100)}%\n` +
        `Detected Clauses: ${analysis.detectedClauses.length}\n\n` +
        `Generated by Arbitration Detector Mobile`;

      await Share.share({
        message,
        title: 'Arbitration Analysis Results',
      });
    } catch (error) {
      console.error('Error sharing analysis:', error);
    }
  };

  const toggleClauseExpansion = (clauseId: string) => {
    setExpandedClause(expandedClause === clauseId ? null : clauseId);
  };

  const renderRiskHeader = () => {
    if (!analysis) return null;

    const riskColor = getRiskColor(analysis.riskLevel);
    const riskIcon = analysis.hasArbitrationClause ? 'warning' : 'check-circle';

    return (
      <View style={[styles.riskHeader, { backgroundColor: riskColor + '10' }]}>
        <View style={styles.riskIconContainer}>
          <Icon name={riskIcon} size={48} color={riskColor} />
        </View>
        <View style={styles.riskContent}>
          <Text style={[styles.riskTitle, { color: theme.colors.text }]}>
            {analysis.hasArbitrationClause 
              ? 'Arbitration Clause Detected' 
              : 'No Arbitration Clause Found'}
          </Text>
          <View style={styles.riskMetrics}>
            <View style={[styles.riskBadge, { backgroundColor: riskColor }]}>
              <Text style={styles.riskBadgeText}>
                {analysis.riskLevel.toUpperCase()} RISK
              </Text>
            </View>
            <Text style={[styles.confidenceText, { color: theme.colors.textSecondary }]}>
              {Math.round(analysis.confidence * 100)}% Confidence
            </Text>
          </View>
        </View>
      </View>
    );
  };

  const renderDetectedClauses = () => {
    if (!analysis || analysis.detectedClauses.length === 0) {
      return (
        <View style={styles.section}>
          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
            Detected Clauses
          </Text>
          <View style={styles.emptyState}>
            <Icon name="description" size={48} color={theme.colors.textSecondary} />
            <Text style={[styles.emptyStateText, { color: theme.colors.textSecondary }]}>
              No arbitration clauses detected in this document
            </Text>
          </View>
        </View>
      );
    }

    return (
      <View style={styles.section}>
        <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
          Detected Clauses ({analysis.detectedClauses.length})
        </Text>
        {analysis.detectedClauses.map((clause) => (
          <TouchableOpacity
            key={clause.id}
            style={[styles.clauseCard, { backgroundColor: theme.colors.surface }]}
            onPress={() => toggleClauseExpansion(clause.id)}
          >
            <View style={styles.clauseHeader}>
              <View style={styles.clauseIconContainer}>
                <Icon
                  name={getClauseTypeIcon(clause.type)}
                  size={24}
                  color={theme.colors.primary}
                />
              </View>
              <View style={styles.clauseInfo}>
                <Text style={[styles.clauseType, { color: theme.colors.text }]}>
                  {clause.type.replace('_', ' ').toUpperCase()}
                </Text>
                <View style={styles.clauseMetrics}>
                  <View style={[
                    styles.severityBadge,
                    { backgroundColor: clause.severity === 'critical' ? theme.colors.error + '20' : theme.colors.warning + '20' }
                  ]}>
                    <Text style={[
                      styles.severityText,
                      { color: clause.severity === 'critical' ? theme.colors.error : theme.colors.warning }
                    ]}>
                      {clause.severity.toUpperCase()}
                    </Text>
                  </View>
                  <Text style={[styles.confidenceSmall, { color: theme.colors.textSecondary }]}>
                    {Math.round(clause.confidence * 100)}%
                  </Text>
                </View>
              </View>
              <Icon
                name={expandedClause === clause.id ? 'expand-less' : 'expand-more'}
                size={24}
                color={theme.colors.textSecondary}
              />
            </View>
            
            {expandedClause === clause.id && (
              <View style={styles.clauseExpanded}>
                <Text style={[styles.clauseText, { color: theme.colors.text }]}>
                  "{clause.text}"
                </Text>
                <Text style={[styles.clauseExplanation, { color: theme.colors.textSecondary }]}>
                  {clause.explanation}
                </Text>
              </View>
            )}
          </TouchableOpacity>
        ))}
      </View>
    );
  };

  const renderRecommendations = () => {
    if (!analysis || analysis.recommendations.length === 0) return null;

    return (
      <View style={styles.section}>
        <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
          Recommendations
        </Text>
        {analysis.recommendations.map((recommendation, index) => (
          <View key={index} style={[styles.recommendationCard, { backgroundColor: theme.colors.surface }]}>
            <View style={styles.recommendationIcon}>
              <Icon name="lightbulb-outline" size={20} color={theme.colors.warning} />
            </View>
            <Text style={[styles.recommendationText, { color: theme.colors.text }]}>
              {recommendation}
            </Text>
          </View>
        ))}
      </View>
    );
  };

  const renderAnalysisMetrics = () => {
    if (!analysis) return null;

    return (
      <View style={styles.section}>
        <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
          Analysis Details
        </Text>
        <View style={[styles.metricsCard, { backgroundColor: theme.colors.surface }]}>
          <View style={styles.metricRow}>
            <Text style={[styles.metricLabel, { color: theme.colors.textSecondary }]}>
              Processing Time
            </Text>
            <Text style={[styles.metricValue, { color: theme.colors.text }]}>
              {analysis.processingTime}ms
            </Text>
          </View>
          <View style={styles.metricRow}>
            <Text style={[styles.metricLabel, { color: theme.colors.textSecondary }]}>
              Analysis Date
            </Text>
            <Text style={[styles.metricValue, { color: theme.colors.text }]}>
              {new Date(analysis.createdAt).toLocaleDateString()}
            </Text>
          </View>
          <View style={styles.metricRow}>
            <Text style={[styles.metricLabel, { color: theme.colors.textSecondary }]}>
              Clauses Found
            </Text>
            <Text style={[styles.metricValue, { color: theme.colors.text }]}>
              {analysis.detectedClauses.length}
            </Text>
          </View>
        </View>
      </View>
    );
  };

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: theme.colors.background,
    },
    loadingContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
    },
    loadingText: {
      marginTop: theme.spacing.md,
      fontSize: theme.typography.fontSize.md,
      color: theme.colors.textSecondary,
    },
    scrollContent: {
      padding: theme.spacing.md,
    },
    riskHeader: {
      padding: theme.spacing.lg,
      borderRadius: theme.borderRadius.lg,
      marginBottom: theme.spacing.lg,
      flexDirection: 'row',
      alignItems: 'center',
    },
    riskIconContainer: {
      marginRight: theme.spacing.md,
    },
    riskContent: {
      flex: 1,
    },
    riskTitle: {
      fontSize: theme.typography.fontSize.lg,
      fontWeight: theme.typography.fontWeight.bold,
      marginBottom: theme.spacing.sm,
    },
    riskMetrics: {
      flexDirection: 'row',
      alignItems: 'center',
    },
    riskBadge: {
      paddingHorizontal: theme.spacing.sm,
      paddingVertical: theme.spacing.xs,
      borderRadius: theme.borderRadius.sm,
      marginRight: theme.spacing.md,
    },
    riskBadgeText: {
      color: 'white',
      fontSize: theme.typography.fontSize.sm,
      fontWeight: theme.typography.fontWeight.bold,
    },
    confidenceText: {
      fontSize: theme.typography.fontSize.sm,
      fontWeight: theme.typography.fontWeight.medium,
    },
    section: {
      marginBottom: theme.spacing.lg,
    },
    sectionTitle: {
      fontSize: theme.typography.fontSize.lg,
      fontWeight: theme.typography.fontWeight.bold,
      marginBottom: theme.spacing.md,
    },
    clauseCard: {
      padding: theme.spacing.md,
      borderRadius: theme.borderRadius.lg,
      marginBottom: theme.spacing.sm,
      shadowColor: theme.colors.shadow,
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
      elevation: 3,
    },
    clauseHeader: {
      flexDirection: 'row',
      alignItems: 'center',
    },
    clauseIconContainer: {
      width: 40,
      height: 40,
      borderRadius: 20,
      backgroundColor: theme.colors.primary + '20',
      justifyContent: 'center',
      alignItems: 'center',
      marginRight: theme.spacing.md,
    },
    clauseInfo: {
      flex: 1,
    },
    clauseType: {
      fontSize: theme.typography.fontSize.md,
      fontWeight: theme.typography.fontWeight.bold,
      marginBottom: theme.spacing.xs,
    },
    clauseMetrics: {
      flexDirection: 'row',
      alignItems: 'center',
    },
    severityBadge: {
      paddingHorizontal: theme.spacing.xs,
      paddingVertical: 2,
      borderRadius: theme.borderRadius.sm,
      marginRight: theme.spacing.sm,
    },
    severityText: {
      fontSize: theme.typography.fontSize.xs,
      fontWeight: theme.typography.fontWeight.bold,
    },
    confidenceSmall: {
      fontSize: theme.typography.fontSize.sm,
    },
    clauseExpanded: {
      marginTop: theme.spacing.md,
      paddingTop: theme.spacing.md,
      borderTopWidth: 1,
      borderTopColor: theme.colors.border,
    },
    clauseText: {
      fontSize: theme.typography.fontSize.md,
      fontStyle: 'italic',
      marginBottom: theme.spacing.sm,
      padding: theme.spacing.sm,
      backgroundColor: theme.colors.background,
      borderRadius: theme.borderRadius.sm,
    },
    clauseExplanation: {
      fontSize: theme.typography.fontSize.sm,
      lineHeight: 20,
    },
    recommendationCard: {
      flexDirection: 'row',
      alignItems: 'flex-start',
      padding: theme.spacing.md,
      borderRadius: theme.borderRadius.lg,
      marginBottom: theme.spacing.sm,
      shadowColor: theme.colors.shadow,
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
      elevation: 3,
    },
    recommendationIcon: {
      marginRight: theme.spacing.md,
      marginTop: 2,
    },
    recommendationText: {
      flex: 1,
      fontSize: theme.typography.fontSize.md,
      lineHeight: 22,
    },
    metricsCard: {
      padding: theme.spacing.md,
      borderRadius: theme.borderRadius.lg,
      shadowColor: theme.colors.shadow,
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
      elevation: 3,
    },
    metricRow: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      paddingVertical: theme.spacing.sm,
      borderBottomWidth: 1,
      borderBottomColor: theme.colors.border,
    },
    metricLabel: {
      fontSize: theme.typography.fontSize.md,
    },
    metricValue: {
      fontSize: theme.typography.fontSize.md,
      fontWeight: theme.typography.fontWeight.medium,
    },
    emptyState: {
      alignItems: 'center',
      padding: theme.spacing.xl,
    },
    emptyStateText: {
      fontSize: theme.typography.fontSize.md,
      textAlign: 'center',
      marginTop: theme.spacing.md,
    },
    shareButton: {
      position: 'absolute',
      top: 0,
      right: 0,
      padding: theme.spacing.sm,
    },
  });

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={theme.colors.primary} />
        <Text style={styles.loadingText}>Analyzing document...</Text>
      </View>
    );
  }

  if (!analysis) {
    return (
      <View style={styles.loadingContainer}>
        <Icon name="error-outline" size={64} color={theme.colors.error} />
        <Text style={[styles.loadingText, { color: theme.colors.error }]}>
          Failed to load analysis
        </Text>
        <TouchableOpacity
          style={[styles.clauseCard, { backgroundColor: theme.colors.primary, marginTop: theme.spacing.md }]}
          onPress={loadAnalysis}
        >
          <Text style={[styles.riskBadgeText, { textAlign: 'center' }]}>
            Retry
          </Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.shareButton} onPress={shareAnalysis}>
        <Icon name="share" size={24} color={theme.colors.text} />
      </TouchableOpacity>
      
      <ScrollView
        style={styles.container}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {renderRiskHeader()}
        {renderDetectedClauses()}
        {renderRecommendations()}
        {renderAnalysisMetrics()}
      </ScrollView>
    </View>
  );
};

export default AnalysisScreen;