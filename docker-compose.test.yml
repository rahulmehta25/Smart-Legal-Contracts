version: '3.8'

services:
  # Test database
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: arbitration_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./backend/scripts/init-test-db.sql:/docker-entrypoint-initdb.d/init-test-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d arbitration_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Test Redis for caching and task queues
  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Vector database for RAG testing
  qdrant-test:
    image: qdrant/qdrant:latest
    ports:
      - "6334:6333"
    volumes:
      - qdrant_test_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Backend test service
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
      args:
        PYTHON_VERSION: 3.11
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/arbitration_test
      - REDIS_URL=redis://redis-test:6379/0
      - QDRANT_URL=http://qdrant-test:6333
      - ENVIRONMENT=test
      - LOG_LEVEL=DEBUG
      - PYTEST_TIMEOUT=300
    volumes:
      - ./backend:/app
      - test_reports:/app/test-reports
      - ./backend/tests/test_data:/app/test_data
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      qdrant-test:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 5 &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Seeding test data...' &&
        python scripts/seed_test_data.py &&
        echo 'Running backend tests...' &&
        pytest tests/ -v 
          --cov=src 
          --cov-report=xml:/app/test-reports/coverage.xml 
          --cov-report=html:/app/test-reports/htmlcov 
          --junit-xml=/app/test-reports/junit.xml 
          --benchmark-json=/app/test-reports/benchmark.json
          --html=/app/test-reports/report.html 
          --self-contained-html
      "
    networks:
      - test-network

  # Frontend test service
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
      args:
        NODE_VERSION: 18
    environment:
      - NODE_ENV=test
      - NEXT_PUBLIC_API_URL=http://backend-test:8000
      - CI=true
    volumes:
      - ./frontend:/app
      - test_reports:/app/test-reports
      - node_modules_cache:/app/node_modules
    command: >
      sh -c "
        echo 'Installing dependencies...' &&
        npm ci &&
        echo 'Running linting...' &&
        npm run lint &&
        echo 'Running type checking...' &&
        npm run type-check &&
        echo 'Running unit tests...' &&
        npm run test:ci &&
        echo 'Building application...' &&
        npm run build
      "
    networks:
      - test-network

  # E2E test environment
  backend-e2e:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/arbitration_test
      - REDIS_URL=redis://redis-test:6379/1
      - QDRANT_URL=http://qdrant-test:6333
      - ENVIRONMENT=test
      - LOG_LEVEL=INFO
    ports:
      - "8001:8000"
    volumes:
      - ./backend/test_uploads:/app/uploads
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      qdrant-test:
        condition: service_healthy
    command: >
      sh -c "
        alembic upgrade head &&
        python scripts/seed_test_data.py &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - test-network

  frontend-e2e:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend-e2e:8000
    ports:
      - "3001:3000"
    depends_on:
      backend-e2e:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - test-network

  # Cypress E2E test runner
  cypress-tests:
    build:
      context: ./frontend
      dockerfile: Dockerfile.cypress
    environment:
      - CYPRESS_BASE_URL=http://frontend-e2e:3000
      - CYPRESS_API_BASE_URL=http://backend-e2e:8000/api/v1
      - CYPRESS_VIDEO=true
      - CYPRESS_SCREENSHOTS=true
    volumes:
      - ./frontend/cypress:/app/cypress
      - test_reports:/app/test-reports
    depends_on:
      frontend-e2e:
        condition: service_healthy
      backend-e2e:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 10 &&
        echo 'Running Cypress E2E tests...' &&
        cypress run 
          --browser chrome 
          --headless 
          --reporter junit 
          --reporter-options 'mochaFile=/app/test-reports/cypress-results.xml'
      "
    networks:
      - test-network

  # Load testing service
  load-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.locust
    environment:
      - TARGET_HOST=http://backend-e2e:8000
      - LOCUST_WEB_PORT=8089
    ports:
      - "8089:8089"
    volumes:
      - ./backend/tests/load_tests:/app/load_tests
      - test_reports:/app/test-reports
    depends_on:
      backend-e2e:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Starting load tests...' &&
        locust 
          -f load_tests/locustfile.py 
          --host http://backend-e2e:8000 
          --headless 
          --users 50 
          --spawn-rate 5 
          --run-time 60s 
          --html /app/test-reports/load-test-report.html
      "
    networks:
      - test-network

  # Test monitoring and reporting
  test-reporter:
    image: alpine:latest
    volumes:
      - test_reports:/reports
      - ./scripts:/scripts
    command: >
      sh -c "
        echo 'Generating test reports...' &&
        /scripts/generate_test_summary.sh &&
        echo 'Test reports generated in /reports directory'
      "
    depends_on:
      - backend-test
      - frontend-test
      - cypress-tests
    networks:
      - test-network

  # Performance monitoring during tests
  prometheus-test:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-test.yml:/etc/prometheus/prometheus.yml
      - prometheus_test_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=1h'
    networks:
      - test-network

  grafana-test:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=test123
    volumes:
      - ./monitoring/grafana-test-dashboards:/var/lib/grafana/dashboards
      - grafana_test_data:/var/lib/grafana
    depends_on:
      - prometheus-test
    networks:
      - test-network

volumes:
  postgres_test_data:
  redis_test_data:
  qdrant_test_data:
  test_reports:
  node_modules_cache:
  prometheus_test_data:
  grafana_test_data:

networks:
  test-network:
    driver: bridge